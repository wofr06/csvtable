#!/usr/bin/perl
use utf8;
use strict;
use warnings;
use Text::CSV;
use Module::Load::Conditional qw[can_load];
use Getopt::Long;
use vars qw(%opt);

Getopt::Long::Configure ("bundling");
GetOptions(
	"c|columns=s" => \$opt{c},
	"d|delimiter=s" => \$opt{d},
	"h|help" => \$opt{h},
	"H|no-header-row" => \$opt{H},
	"l|linenumbers" => \$opt{l},
    "o|output-field-separator=s" => \$opt{o},
	"q|quotechar=s" => \$opt{q},
	"y|snifflimit=i" => \$opt{y},
	"z|maxfieldsize=i" => \$opt{z},
) or die("\n");

my $ok = can_load( modules => {'Unicode::GCString' => undef});

# number of lines to determine maximum field width
my $max_lines = $opt{y} // 1000;
Usage() if $opt{h};

my $fh;
my $file = $ARGV[0];
if (! $file or $file eq '-') {
	$fh = *STDIN;
} else {
	open $fh, $file or die "$file: $!";
}
binmode($fh, ":encoding(utf8)");
binmode(STDOUT, ":encoding(utf8)");

my ($sep, $lines) = get_separator($max_lines, $fh);

my $csv = Text::CSV_XS->new({
	binary => 1,
	auto_diag => 1,
	sep_char => $sep,
	quote_char => ($opt{q} or '"'),
	allow_loose_quotes => 1,
	allow_unquoted_escape => 1,
	allow_whitespace => 1,
	allow_loose_escapes => 1});

process_csv($csv, $sep, $lines, $max_lines);

sub Usage {
	(my $prog = $0) =~ s,.*/,,;
	warn <<EOF;
Usage: $0 [options] [filename]
    Tabular view of a csv file from a file or STDIN. Tries to be as tolerant
    as possible: e.g. mixed latin1/utf-8 chars, guessing delimiter for csv
    fields (, ; | : and TAB), guessing field width, tolerates bad quoting,
    lines with different number of fields, missing separator char in input etc.
	For correct wide character handling the perl module Unicode::GCString is
    recommended.
Options:
    -c columns      display only given columns (number or range, e.g. 1,3-5)
    -d delimiter    overrides the guessed delimiting character
    -l              add a first column containing the line number
    -h              print this help text
    -H              no header line
    -o string       field separator in output, e.g. ' | ' or ' '
    -q quote_char   override the default quote character (")
    -y #_of_lines   # of lines to determine field width (1000), 0 for unlimited
    -z max_fld_size maximum field width, wrap (+num) or truncate ('-num')
EOF
	exit 0;
}

sub get_separator {
	my ($max_lines, $fh) = @_;
	my $lines;
	# regex taken from Text-CSV-Separator by Enrique Nell and slightly modified
	my $numrxdot = qr/(?:^|(?<=[^\d,.]))
		(?:[-+]?(?:\d{0,3}?(?:\.\d{3})*|\d+),\d+)(?=$|[^\d,.])/x;
	my $numrxcomma = qr/(?:^|(?<=[^\d,.]))
		(?:[-+]?\d{0,3}?((?:,\d{3})+)(?:\.\d+)?)(?=$|[^\d,.])(?:\.\d+)?/x;
	my %seps;
	$seps{$opt{d}} = 1 if $opt{d};
	while (<$fh>) {
		push @$lines, $_;
		last if $max_lines and $. > $max_lines;
		next if keys %seps;
		for my $sep ("\t", ';', '|', ':', ',') {
			my @match = /\Q$sep/g;
			$seps{$sep} = @match if @match;
		}
		if (exists $seps{','} and keys %seps > 1) {
			# check for numbers containing comma, if ambig separator
			my @nums = $_ =~ /$numrxdot/g;
			$seps{','} -= @nums;
			@nums = $_ =~ /$numrxcomma/g;
			$seps{','} -= $_ =~ tr/,/,/ for @nums;
			delete $seps{','} if $seps{','} <= 0;
		}
	}
	#prefer tab, suppress colon in case of ambiguities
	delete $seps{':'} if keys %seps > 1;
	$sep = (sort {$seps{$b}>$seps{$a}} keys %seps)[0];
	$sep = "\t" if exists $seps{"\t"};
	return ($sep || ',', $lines);
}

sub process_csv {
	my ($csv, $sep, $lines, $max_lines) = @_;
	my (@size, @isnum, @rows, @selrow);
	# calculate columns to use for display
	if ($opt{c}) {
		$opt{c} =~ s/\s//g;
		my @ranges = split /,/, $opt{c};
		for (grep{/-/} @ranges) {
			my ($beg, $end) = split /-/;
			$selrow[$_] = 1 for ($beg .. $end);
		}
		$selrow[$_] = 1 for grep{/^\d+$/} @ranges;
	}
	my $BOM = "\x{ef}\x{bb}\x{bf}"; my $BOM2 = "\x{ef}\x{ff}";
	# skip BOM
	$lines->[0] =~ s/^$BOM|^$BOM2//;
	shift @$lines if $lines->[0] =~ /^[\s$sep]*$/;
	# determine field length and field type
	my $skip = 1;
	for my $line (@$lines) {
		#print first lines without separator character
		if ($skip and $line !~ /$sep/) {
			print $line;
		} else {
			$skip = 0;
		}
		next if $skip;
		next if ! $csv->parse($line);
		my @row = $csv->fields();
		my $i = 0; my $j = 1;
		my $fields;
		for my $fld (@row) {
			next if $opt{c} and ! $selrow[$j++];
			$isnum[$i] = 1 if ! defined $isnum[$i];
			$fld =~ s/^\s+//; $fld =~ s/\s+$//;
			$isnum[$i] = 0 if $fld and $fld !~ /^["']?[-+.,\d]*["']?$/;
			my $len = stringwidth($fld);
			$size[$i] = $len if ($size[$i] || 0) <= $len;
			$size[$i] = abs($opt{z}) if $opt{z} and abs($opt{z}) < $size[$i];
			push @$fields, $fld;
			$i++;
		}
		undef @isnum if $line eq $lines->[0];
		die "no data to display\n" if ! defined $fields;
		push @rows, $fields;
	}
	# do we have a header line
	my $has_header = ($opt{H} or ! defined $rows[0]) ? 0 : 1;
	for (@{$rows[0]}) {
		# header should not contain numbers
		$has_header = 0 if /^[-+.,\s\d]+$/;
	}
	my ($tline, $sepchr);
	# first pseudo column line number has minimum length 4
	my $numsz = ($. < $max_lines) ? length $. : 4;
	if (defined $opt{o}) {
		$sepchr = $opt{o};
	} else {
		my @boxc = ([qw(┌ ─ ┬ ┐)], [qw(┏ ━ ┳ ┓)]);
		my $chr = $boxc[$has_header];
		my $hline = $chr->[0];
		$tline = "└";
		if ($opt{l}) {
			$hline .= $chr->[1] x ($numsz + 2) . $chr->[2];
			$tline .=  "─"x ($numsz + 2) . "┴";
		}
		for (my $i=0; $i < @size; $i++) {
			$hline .= $chr->[1]x($size[$i]+2) . ($i < $#size ? $chr->[2] : '');
			$tline .= "─"x($size[$i]+2) . ($i < $#size ? "┴" : '');
		}

		print "$hline$chr->[3]\n";
		$sepchr = " │ ";
	}
	if ($has_header) {
		my $tline = "┡";
		$tline .= "━" x ($numsz + 2) .  "╇" if $opt{l};
		my $sepchr = $opt{o};
		if ( ! defined $opt{o}) {
			$sepchr = " ┃ ";
			$tline .= "━"x($_+2) . "╇" for @size;
			substr($tline, -1, 1, '');
		}
		print_line(shift @rows, \@size, \@isnum, $sepchr, ' 'x($numsz -1) . 1);
		print "$tline┩\n" if ! defined $opt{o};
	}
	my $lineno = 2;
	print_line($_, \@size, \@isnum, $sepchr, sprintf("%${numsz}d", $lineno++)) for @rows;
	while (<$fh>) {
		next if ! $csv->parse($_);
		my @row = $csv->fields();
		my $fields;
		for (my $i=0; $i < @row; $i++) {
			push @$fields, $row[$i] if $selrow[$i+1] or ! $opt{c};
		}
		print_line($fields, \@size, \@isnum, $sepchr, sprintf("%${numsz}d", $.));
	}
	close $fh;
	print "$tline┘\n" if ! defined $opt{o};
}

sub print_line {
	my ($str, $size, $isnum, $sep, $lnum) = @_;
	push @$str, '' while @$str < @$size;
	s/^\s+// for @$str; s/\s+$// for @$str;
	while ("@$str" !~ /^\s*$/) {
		my @h2;
		for (my $i = 0; $i < @$str; $i++) {
			# add columns, which are not there from the beginning
			$size->[$i] ||= $opt{z} || stringwidth($str->[$i]);
			$h2[$i] = substr $str->[$i], 0, $size->[$i], '';
			my $len = stringwidth($h2[$i]);
			my $num = $size->[$i] - $len;
			while ($num < 0) {
				$str->[$i] = substr($h2[$i], -1, 1, '') . $str->[$i];
				$len = stringwidth($h2[$i]);
				# size too small for wide chars
				$size->[$i]++ if ! $len;
				$num = $size->[$i] - $len;
			}
			$h2[$i] .= " " x $num if $num > 0 and ! $isnum->[$i];
			$h2[$i] = " " x $num . $h2[$i] if $num > 0 and $isnum->[$i];
		}
		(my $sep1 = $sep) =~ s/^\s//g;
		(my $sep2 = $sep) =~ s/\s$//g;
		unshift @h2, $lnum if $opt{l};
		print $sep1 . join($sep, @h2) . $sep2 . "\n";
		last if $opt{z} and $opt{z} < 0;
	}
}

sub stringwidth {
	(my $str) = @_;
	if ($ok) {
		return Unicode::GCString->new($str)->columns;
	} else {
		return length($str);
	}
}
